// Code generated by ./genIterators -p dota2api -i genIterators.yaml -o iterators.go; DO NOT EDIT.

package dota2api

import "sync"

func (h Heroes) ForEach(f func(hero Hero)) {
	iter := func(heroes []Hero) {
		for _, hero := range heroes {
			f(hero)
		}
	}
	iter(h.heroes)

}

func (h Heroes) ForEachAsync(f func(hero Hero)) {
	var wg sync.WaitGroup
	iter := func(heroes []Hero) {
		wg.Add(len(heroes))
		for _, hero := range heroes {
			f(hero)
			wg.Done()
		}
	}
	iter(h.heroes)

	wg.Wait()
}

func (h Heroes) GoForEach(f func(hero Hero)) func() {
	var wg sync.WaitGroup
	iter := func(heroes []Hero) {
		wg.Add(len(heroes))
		for _, hero := range heroes {
			f(hero)
			wg.Done()
		}
	}
	iter(h.heroes)

	return wg.Wait
}

func (i Items) ForEach(f func(item Item)) {
	iter := func(items []Item) {
		for _, item := range items {
			f(item)
		}
	}
	iter(i.items)

}

func (i Items) ForEachAsync(f func(item Item)) {
	var wg sync.WaitGroup
	iter := func(items []Item) {
		wg.Add(len(items))
		for _, item := range items {
			f(item)
			wg.Done()
		}
	}
	iter(i.items)

	wg.Wait()
}

func (i Items) GoForEach(f func(item Item)) func() {
	var wg sync.WaitGroup
	iter := func(items []Item) {
		wg.Add(len(items))
		for _, item := range items {
			f(item)
			wg.Done()
		}
	}
	iter(i.items)

	return wg.Wait
}

func (m Match) ForEachPlayer(f func(player PlayerDetails)) {
	iter := func(team []PlayerDetails) {
		for _, p := range team {
			f(p)
		}
	}
	iter(m.Radiant)
	iter(m.Dire)

}

func (m Match) ForEachPlayerAsync(f func(player PlayerDetails)) {
	var wg sync.WaitGroup
	iter := func(team []PlayerDetails) {
		wg.Add(len(team))
		for _, p := range team {
			f(p)
			wg.Done()
		}
	}
	iter(m.Radiant)
	iter(m.Dire)

	wg.Wait()
}

func (m Match) GoForEachPlayer(f func(player PlayerDetails)) func() {
	var wg sync.WaitGroup
	iter := func(team []PlayerDetails) {
		wg.Add(len(team))
		for _, p := range team {
			f(p)
			wg.Done()
		}
	}
	iter(m.Radiant)
	iter(m.Dire)

	return wg.Wait
}

func (t Team) ForEach(f func(player Player)) {
	iter := func(team []Player) {
		for _, p := range team {
			f(p)
		}
	}
	iter(t.players)

}

func (t Team) ForEachAsync(f func(player Player)) {
	var wg sync.WaitGroup
	iter := func(team []Player) {
		wg.Add(len(team))
		for _, p := range team {
			f(p)
			wg.Done()
		}
	}
	iter(t.players)

	wg.Wait()
}

func (t Team) GoForEach(f func(player Player)) func() {
	var wg sync.WaitGroup
	iter := func(team []Player) {
		wg.Add(len(team))
		for _, p := range team {
			f(p)
			wg.Done()
		}
	}
	iter(t.players)

	return wg.Wait
}

func (t TeamDetails) ForEach(f func(player PlayerDetails)) {
	iter := func(team []PlayerDetails) {
		for _, p := range team {
			f(p)
		}
	}
	iter([]PlayerDetails(t))

}

func (t TeamDetails) ForEachAsync(f func(player PlayerDetails)) {
	var wg sync.WaitGroup
	iter := func(team []PlayerDetails) {
		wg.Add(len(team))
		for _, p := range team {
			f(p)
			wg.Done()
		}
	}
	iter([]PlayerDetails(t))

	wg.Wait()
}

func (t TeamDetails) GoForEach(f func(player PlayerDetails)) func() {
	var wg sync.WaitGroup
	iter := func(team []PlayerDetails) {
		wg.Add(len(team))
		for _, p := range team {
			f(p)
			wg.Done()
		}
	}
	iter([]PlayerDetails(t))

	return wg.Wait
}

func (p PicksBans) ForEachPicksBans(f func(pickBan PickBan)) {
	iter := func(pickBan []PickBan) {
		for _, pB := range pickBan {
			f(pB)
		}
	}
	iter([]PickBan(p))

}

func (p PicksBans) ForEachPicksBansAsync(f func(pickBan PickBan)) {
	var wg sync.WaitGroup
	iter := func(pickBan []PickBan) {
		wg.Add(len(pickBan))
		for _, pB := range pickBan {
			f(pB)
			wg.Done()
		}
	}
	iter([]PickBan(p))

	wg.Wait()
}

func (p PicksBans) GoForEachPicksBans(f func(pickBan PickBan)) func() {
	var wg sync.WaitGroup
	iter := func(pickBan []PickBan) {
		wg.Add(len(pickBan))
		for _, pB := range pickBan {
			f(pB)
			wg.Done()
		}
	}
	iter([]PickBan(p))

	return wg.Wait
}

func (a AbilityUpgrades) ForEachAbilityUpgrades(f func(abilityUpgrade AbilityUpgrade)) {
	iter := func(abilityUpgrade []AbilityUpgrade) {
		for _, aU := range abilityUpgrade {
			f(aU)
		}
	}
	iter([]AbilityUpgrade(a))

}

func (a AbilityUpgrades) ForEachAbilityUpgradesAsync(f func(abilityUpgrade AbilityUpgrade)) {
	var wg sync.WaitGroup
	iter := func(abilityUpgrade []AbilityUpgrade) {
		wg.Add(len(abilityUpgrade))
		for _, aU := range abilityUpgrade {
			f(aU)
			wg.Done()
		}
	}
	iter([]AbilityUpgrade(a))

	wg.Wait()
}

func (a AbilityUpgrades) GoForEachAbilityUpgrades(f func(abilityUpgrade AbilityUpgrade)) func() {
	var wg sync.WaitGroup
	iter := func(abilityUpgrade []AbilityUpgrade) {
		wg.Add(len(abilityUpgrade))
		for _, aU := range abilityUpgrade {
			f(aU)
			wg.Done()
		}
	}
	iter([]AbilityUpgrade(a))

	return wg.Wait
}
